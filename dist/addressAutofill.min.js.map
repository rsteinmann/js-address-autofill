{"version":3,"sources":["webpack://AddressAutofill/webpack/bootstrap","webpack://AddressAutofill/./src/addressAutofill.js","webpack://AddressAutofill/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","defaultOptions","autoConstruct","enableInputFillIn","useBrowserGeolocation","inputSelector","googleScriptParams","googlePlacesConfig","mapResult","streetName","use","resultType","targetSelector","streetNumber","city","country","postalCode","lat","lng","instances","AddressAutofill","context","options","HTMLElement","HTMLDocument","this","inputElement","querySelector","HTMLInputElement","autocomplete","result","instance","push","getAttribute","window","hasGoogleAutocomplete","initAutocomplete","forEach","params","console","error","mapsUrl","mapsScript","document","createElement","src","body","appendChild","injectMapsScript","addEventListener","event","keyCode","preventDefault","stopPropagation","resultMap","place","getPlace","itemName","itemValue","geometry","location","address_component","address_components","filter","component","types","includes","length","element","warn","reference","google","maps","places","Autocomplete","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","addListener","setAddress","init"],"mappings":"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","file":"addressAutofill.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * The Modules default configuration.\n */\nconst defaultOptions = {\n  autoConstruct: false, // if set to true the module will autoconstruct and attach to window object as \"addressAutofill\"\n  enableInputFillIn: true, // Fills out form with configured selectors on selection of google address\n  useBrowserGeolocation: true, // Uses the browser's geolocation API to ask the user for her current location (makes predictions more precise)\n  inputSelector: '[data-autocomplete]',\n  googleScriptParams: { // This configuration will be passed to Google Places API as urlParams\n    key: 'YOUR_KEY_IS_REQUIRED_HERE' // This is required!\n  },\n  googlePlacesConfig: {}, // This configuration will be passed to Google Places API\n  mapResult: {\n    streetName: {\n      use: 'long_name',\n      resultType: 'route',\n      targetSelector: '[name=\"streetName\"]'\n    },\n    streetNumber: { \n      use: 'short_name',                    // Use from Api result 'short_name' | 'long_name'\n      resultType: 'street_number',          // Name of the type from Api result\n      targetSelector: '[name=\"streetNumber\"]'  // Target element that should be filled with this information\n    },\n    city: {\n      use: 'long_name',\n      resultType: 'locality',\n      targetSelector: '[name=\"city\"]'\n    },\n    country: {\n      use: 'long_name',\n      resultType: 'country',\n      targetSelector: '[name=\"country\"]'\n    },\n    postalCode: {\n      use: 'short_name',\n      resultType: 'postal_code',\n      targetSelector: '[name=\"postalCode\"]'\n    },\n    lat: {\n      use: 'geo',\n      resultType: 'lat',\n      targetSelector: '[name=\"lat\"]'\n    },\n    lng: {\n      use: 'geo',\n      resultType: 'lng',\n      targetSelector: '[name=\"lng\"]'\n    }\n  }\n}\n\n\n/**\n * Stores all instances of AddressAutofill\n */\nlet instances = []\n\n\nexport default class AddressAutofill {\n  constructor (context, options = {}) {\n    if (typeof context !== 'object' || (!(context instanceof HTMLElement) && !(context instanceof HTMLDocument))) {\n      console.error('Please choose a valid context for AddressAutofill! Given:', context)\n      return null\n    }\n    this.context = context\n    this.inputElement = this.context.querySelector('[data-autocomplete]')\n    if (!(this.inputElement instanceof HTMLInputElement)) {\n      console.error('Please choose a valid input field for AddressAutofill! Given:', this.inputElement)\n      return null\n    }\n    this.options = {...defaultOptions, ...options}\n    this.autocomplete = null\n    this.result = null\n    this.instance = instances.push(this) - 1\n\n    // Check for configs\n    if (this.inputElement.getAttribute('data-autocomplete') !== null) {\n      this.options.googleScriptParams.key = this.inputElement.getAttribute('data-autocomplete')\n    }\n\n    // Check if the script is already injected\n    if (!window.hasGoogleAutocomplete) {\n      if (typeof window.initAutocomplete !== 'function') {\n        // Creates new instance of autocomplete for each already existing AddressAutofill instance\n        window.initAutocomplete = () => instances.forEach(instance => initAutocomplete(instance))\n      }\n      injectMapsScript(this.options.googleScriptParams)\n    } else {\n      initAutocomplete(this)\n    }\n\n    // Capture Enter Press\n    this.inputElement.addEventListener('keydown', event => {\n      if (event.keyCode == 13) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n    })\n\n    return this\n  }\n\n\n  /**\n   * Sets the address found by the Places API to the configured fields.\n   */\n  setAddress() {\n    this.result = {}\n    const resultMap = this.options.mapResult\n    const place = this.autocomplete.getPlace()\n    // Map the result data\n    for (const itemName in resultMap) {\n      const itemValue = null\n      switch(resultMap[itemName].resultType) {\n        case 'lat':\n          itemValue = place.geometry.location.lat()\n          break\n        case 'lng':\n          itemValue = place.geometry.location.lng()\n          break\n        default:\n          const address_component = place.address_components.filter(component => component.types.includes(resultMap[itemName].resultType))\n          if (address_component.length > 0) {\n            itemValue = address_component[0][resultMap[itemName].use]\n          }\n      }\n      // Optional: Fill out the form\n      if (this.options.enableInputFillIn) {\n        const element = this.context.querySelector(resultMap[itemName].targetSelector)\n        if (!element) {\n          console.warn(`AddressAutofill: Could not find in element ${resultMap[itemName].targetSelector} in DOM, please check your config!`)\n        } else {\n          this.result[itemName] = itemValue\n          element.value = itemValue\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * Injects Google Maps Api script to dom using params from config.\n * @param {object} params \n */\nfunction injectMapsScript (params = null) {\n  if (typeof params !== 'object') {\n    return console.error('\"googleScriptParams\" are required for AddressAutofill configuration!')\n  }\n  if (!params.key) {\n    return console.error('Please add a valid API key for \"AddressAutofill\" to run AddressAutofill!')\n  }\n  let mapsUrl = \"https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete\"\n  let mapsScript = document.createElement(\"script\")\n  for (const key in params) {\n    mapsUrl += `&${key}=${params[key]}`\n  }\n  mapsScript.src = mapsUrl\n  document.body.appendChild(mapsScript)\n  window.hasGoogleAutocomplete = true\n}\n\n\n/**\n * Instanciates a new google autocomplete object and binds it to the given AddressAutofill instance.\n * @param {AddressAutofill} instance - Any instance of the AddressAutofill module.\n */\nfunction initAutocomplete (instance) {\n  // Create the autocomplete instance with custom options\n  instance.autocomplete = new google.maps.places.Autocomplete(instance.inputElement, instance.options.googlePlacesConfig)\n  if (instance.options.useBrowserGeolocation) {\n    geolocate(instance.autocomplete)\n  }\n  // When the user selects an address from the dropdown, populate the address fields in the form.\n  instance.autocomplete.addListener('place_changed', () => instance.setAddress())\n}\n\n\n/**\n * Tries to get the user's geolocation using the browser's Geolocation API.\n */\nfunction geolocate(reference) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }\n      const circle = new google.maps.Circle({\n        center: location,\n        radius: position.coords.accuracy\n      })\n      reference.setBounds(circle.getBounds())\n    })\n  }\n}","import AddressAutofill from './addressAutofill'\n\nexport const init = (context, options = {}) => new AddressAutofill(context, options)"],"sourceRoot":""}