{"version":3,"sources":["webpack://AddressAutofill/webpack/bootstrap","webpack://AddressAutofill/./src/gMaps.js","webpack://AddressAutofill/./src/addressAutofill.js","webpack://AddressAutofill/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","defaultMapsParams","v","isMapsScriptInjected","isMapsScriptLoaded","addressAutofillInstances","getMapsUrl","mapsParams","console","error","mapsUrl","initPlacesServices","instance","mapsContainer","context","document","body","createElement","id","style","display","appendChild","injectMapContainer","baseLocation","google","maps","LatLng","options","lat","lng","services","autocomplete","places","AutocompleteService","Map","center","zoom","PlacesService","defaultOptions","autoConstruct","enableInputFillIn","useBrowserGeolocation","inputSelector","googlePlacesConfig","mapResult","use","resultType","targetSelector","bindValue","AddressAutofill","HTMLElement","HTMLDocument","this","inputElement","querySelector","HTMLInputElement","hasInstantiated","result","init","push","reference","mappings","callback","Autocomplete","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","longitude","circle","Circle","radius","accuracy","setBounds","getBounds","gMaps","addEventListener","event","keyCode","preventDefault","stopPropagation","addListener","placeChanged","getAddress","forEach","mapping","place","getPlace","results","mapItem","itemValue","geometry","address_component","address_components","filter","component","types","includes","length","target","getMappedResults","setAddress","searchObject","input","getFormValues","sessionToken","AutocompleteSessionToken","getPlacePredictions","predictions","getDetails","placeId","place_id","fields","status","PlacesServiceStatus","OK","resultItem","element","warn","asString","formValues","route","street_number","postal_code","locality","country","trim","instances","injectMaps","mapsScript","src","window","initAutocomplete"],"mappings":"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","file":"addressAutofill.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n *  This configuration will be passed to Google Places API as urlParams.\n */\nconst defaultMapsParams = {\n  v: '3.39', // Sets google maps to a specific version\n  key: 'YOUR_KEY_IS_REQUIRED_HERE', // Sets the google places api key\n}\n\n\n/**\n * A state that tells if the Google Maps Api Script has been injected to dom already.\n */\nlet isMapsScriptInjected = false\n\n\n/**\n * A state that tells if the Google Maps Api Script has been loaded already.\n */\nlet isMapsScriptLoaded = false\n\n\n/**\n * \n */\nlet addressAutofillInstances = []\n\n\n/**\n * Adds a new instance to storage.\n * @param {AddressAutocomplete} instance - An instance of AddressAutocomplete.\n */\nexport function addInstance (instance) {\n  if (isMapsScriptLoaded) {\n    instance.init()\n  } else {\n    addressAutofillInstances.push(instance)\n  }\n}\n\n\n/**\n * Generates a valid Google Places Api Url to fetch the script from.\n * @param {Object} mapsParams - Url-params stored as an object.\n */\nexport function getMapsUrl(mapsParams) {\n  if (typeof mapsParams !== 'object') {\n    return console.error('injectMapsScript: \"params\" should be passed as object!')\n  }\n  if (!mapsParams.key) {\n    return console.error('Please add a valid API key for Google Places to use the service!')\n  }\n  mapsParams = {...defaultMapsParams, ...mapsParams}\n  let mapsUrl = 'https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete'\n  for (const key in mapsParams) {\n    mapsUrl += `&${key}=${mapsParams[key]}`\n  }\n  return mapsUrl\n}\n\n\n/**\n * Injects Google Maps Api script to dom once.\n * @param {String} mapsUrl - Url-params stored as an object.\n */\nexport function injectMapsScript (mapsParams) {\n  if (isMapsScriptInjected) {\n    return false\n  }\n  let mapsScript = document.createElement('script')\n  mapsScript.src = getMapsUrl(mapsParams)\n  document.body.appendChild(mapsScript)\n  isMapsScriptInjected = true\n}\n\n\n/**\n * Creates and injects an invisible google maps container to passed context.\n * @param {HTMLElement} context - The context in which the container is injected\n */\nexport function injectMapContainer (context = document.body) {\n  let mapsContainer = document.createElement('div')\n  mapsContainer.id = 'mapsContainer'\n  mapsContainer.style.display = 'none'\n  context.appendChild(mapsContainer)\n  return mapsContainer\n}\n\n\n/**\n * Callback that creates an autocomplete instance to each stored instance.\n */\nexport function initAutocomplete () {\n  isMapsScriptLoaded = true\n  addressAutofillInstances.forEach(instance => {\n    instance.init()\n  })\n}\n\n\n/**\n * Instantitates several google api services required to request addresses programatically.\n * @param {AddressAutofill} instance - Any instance of AddressAutofill\n */\nexport function initPlacesServices (instance) {\n  let mapsContainer = injectMapContainer(instance.context)\n  // eslint-disable-next-line no-undef\n  const baseLocation = new google.maps.LatLng(instance.options.baseLocation.lat, instance.options.baseLocation.lng)\n  // eslint-disable-next-line no-undef\n  instance.services.autocomplete = new google.maps.places.AutocompleteService()\n  // eslint-disable-next-line no-undef\n  instance.services.maps = new google.maps.Map(mapsContainer, { center: baseLocation, zoom: 15 })\n  // eslint-disable-next-line no-undef\n  instance.services.places = new google.maps.places.PlacesService(instance.services.maps)\n}\n\n\n/**\n * Tries to get the user's geolocation using the browser's Geolocation API.\n */\nexport function geolocate(reference) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }\n      // eslint-disable-next-line no-undef\n      const circle = new google.maps.Circle({\n        center: location,\n        radius: position.coords.accuracy\n      })\n      reference.setBounds(circle.getBounds())\n    })\n  }\n}","import * as gMaps from './gMaps'\n\n/**\n * The Modules default configuration.\n */\nconst defaultOptions = {\n  autoConstruct: false, // if set to true the module will autoconstruct and attach to window object as \"addressAutofill\"\n  enableInputFillIn: true, // Fills out form with configured selectors on selection of google address\n  useBrowserGeolocation: true, // Uses the browser's geolocation API to ask the user for her current location (makes predictions more precise)\n  inputSelector: '[data-autocomplete]',\n  baseLocation: { lat: 51.1642292, lng: 10.4541194 }, // Sets the starting location where adresses should be searched from (default: mid of germany)\n  googlePlacesConfig: {}, // This configuration will be passed to Google Places API\n  mapResult: [\n    {\n      use: 'long_name',\n      resultType: 'route',\n      targetSelector: '[name=\"streetName\"]'\n    },\n    {\n      use: 'short_name',                        // Use from Api result 'short_name' | 'long_name'\n      resultType: 'street_number',              // Name of the type from Api result\n      targetSelector: '[name=\"streetNumber\"]',  // Target element that should be filled with this information\n      bindValue: true                           // If set to true the user input will be backwritten to maps input\n    },\n    {\n      use: 'long_name',\n      resultType: 'locality',\n      targetSelector: '[name=\"city\"]'\n    },\n    {\n      use: 'long_name',\n      resultType: 'country',\n      targetSelector: '[name=\"country\"]'\n    },\n    {\n      use: 'short_name',\n      resultType: 'postal_code',\n      targetSelector: '[name=\"postalCode\"]'\n    },\n    {\n      use: 'geo',\n      resultType: 'lat',\n      targetSelector: '[name=\"lat\"]'\n    },\n    {\n      use: 'geo',\n      resultType: 'lng',\n      targetSelector: '[name=\"lng\"]'\n    }\n  ]\n}\n\n\nexport default class AddressAutofill {\n  constructor (context, options = {}) {\n    if (typeof context !== 'object' || (!(context instanceof HTMLElement) && !(context instanceof HTMLDocument))) {\n      console.error('Please choose a valid context for AddressAutofill! Given:', context)\n      return null\n    }\n    this.context = context\n    this.inputElement = this.context.querySelector('[data-autocomplete]')\n    if (!(this.inputElement instanceof HTMLInputElement)) {\n      console.error('Please choose a valid input field for AddressAutofill! Given:', this.inputElement)\n      return null\n    }\n    this.options = {...defaultOptions, ...options}\n    this.hasInstantiated = false\n    this.result = null\n    this.services = {}\n    // Add instance to gMaps\n    gMaps.addInstance(this)\n\n    return this\n  }\n\n\n  /**\n   * Initializes the Module.\n   * Gets fired as callback when google maps has finished loading.\n   */\n  init () {\n    if (this.hasInstantiated) {\n      return false\n    }\n    // eslint-disable-next-line no-undef\n    this.autocomplete = new google.maps.places.Autocomplete(this.inputElement, this.options.googlePlacesConfig)\n    if (this.options.useBrowserGeolocation) {\n      gMaps.geolocate(this.autocomplete)\n    }\n    gMaps.initPlacesServices(this)\n    // Capture Enter Press\n    this.inputElement.addEventListener('keydown', event => {\n      if (event.keyCode == 13) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n    })\n    // When the user selects an address from the dropdown, fire callback\n    this.autocomplete.addListener('place_changed', () => this.placeChanged())\n    bindInputs (this.options.mapResult, this.context, () => this.getAddress() )\n    this.hasInstantiated = true\n    return this.hasInstantiated\n  }\n\n\n  /**\n   * Callback that gets fired when a new place has been selected.\n   */\n  placeChanged (place) {\n    place = place || this.autocomplete.getPlace()\n    this.result = getMappedResults(this.options.mapResult, place)\n    if (this.options.enableInputFillIn) {\n      this.setAddress()\n    }\n  }\n\n\n  /**\n   * Collects the form data and sends it to google autocomplete service to get back a place.\n   */\n  getAddress() {\n    const searchObject = { \n      ...{\n        input: this.getFormValues(true),\n        // eslint-disable-next-line no-undef\n        sessionToken: new google.maps.places.AutocompleteSessionToken()\n      }, \n      ...this.options.googlePlacesConfig\n    }\n    this.services.autocomplete.getPlacePredictions(searchObject,\n      (predictions)=> {\n        this.services.places.getDetails({ \n          placeId: predictions[0].place_id, \n          fields: ['geometry', 'address_component']\n        },\n        (place, status) => {\n          // eslint-disable-next-line no-undef\n          if (status == google.maps.places.PlacesServiceStatus.OK) {\n            this.placeChanged(place)\n          }\n        })\n      })\n  }\n\n\n  /**\n   * Sets the address found by the Places API to the configured fields.\n   */\n  setAddress() {\n    this.result.forEach(resultItem => {\n      const element = this.context.querySelector(resultItem.target)\n      if (!element) {\n        console.warn(`AddressAutofill: Could not find in element ${resultItem.target} in DOM, please check your config!`)\n      } else {\n        element.value = resultItem.value\n      }\n    })\n  }\n\n\n  /**\n   * Gets all values from form and transforms them into object or string.\n   * @param {boolean} asString - if set to true it returns as string\n   * @return {object|string}\n   */\n  getFormValues (asString = false) {\n    let formValues = {\n      route: '',\n      street_number: '',\n      postal_code: '',\n      locality: '',\n      country: ''\n    }\n    this.options.mapResult.forEach(mapping => {\n      const value = this.context.querySelector(mapping.targetSelector).value\n      formValues[mapping.resultType] = value\n    })\n    if (!asString) {\n      return formValues\n    } else {\n      return `${formValues.route} ${formValues.street_number}, ${formValues.postal_code} ${formValues.locality}, ${formValues.country}`.trim()\n    }\n  }\n}\n\n\n/**\n * Maps the Google places results to a given structure.\n * @param {Array} mappings - An Array that contains objects with use, resultsType, targetSelector properties\n * @param {Object} place - The GooglePlaces result place object.\n */\nfunction getMappedResults(mappings, place) {\n  let results = []\n  // Map the result data\n  mappings.forEach(mapItem => {\n    let itemValue\n    if (mapItem.resultType === 'lat') {\n      itemValue = place.geometry.location.lat()\n    }\n    else if (mapItem.resultType === 'lng') {\n      itemValue = place.geometry.location.lng()\n    }\n    else {\n      var address_component = place.address_components.filter(component => component.types.includes(mapItem.resultType))\n      if (address_component.length > 0) {\n        itemValue = address_component[0][mapItem.use]\n      } else {\n        itemValue = ''\n      }\n    }\n    results.push({\n      target: mapItem.targetSelector,\n      value: itemValue\n    })\n  })\n  return results\n}\n\n\n/**\n * Binds to all input fields that are configured in mappings.\n * @param {Array} mappings - An Array that contains objects with use, resultsType, targetSelector properties\n * @param {HTMLElement} context - Context in which the input fields are searched\n * @param {Function} callback - Callback that gets fired\n */\nfunction bindInputs (mappings, context, callback) {\n  mappings.forEach(mapping => {\n    if (mapping.bindValue && mapping.bindValue === true) {\n      context\n        .querySelector(mapping.targetSelector)\n        .addEventListener('keyup', event => callback(event))\n    }\n  })\n}\n","import * as gMaps from './gMaps'\nimport AddressAutofill from './addressAutofill'\n\nexport const instances = []\n\nexport const injectMaps = (mapsParams) => gMaps.injectMapsScript(mapsParams)\n\n\nexport const init = (context, options = {}) => {\n  const instance = new AddressAutofill(context, options)\n  instances.push(instance)\n  return instance\n}\n\n\n/**\n * IIFE defines window.initAutocomplete callback and maps it to gMaps\n */\n(() => {\n  if (typeof window.initAutocomplete === 'undefined') {\n    window.initAutocomplete = () => gMaps.initAutocomplete()\n  }\n})()"],"sourceRoot":""}