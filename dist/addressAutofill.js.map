{"version":3,"sources":["webpack://AddressAutofill/webpack/bootstrap","webpack://AddressAutofill/./src/addressAutofill.js","webpack://AddressAutofill/./src/index.js"],"names":["defaultOptions","autoConstruct","enableInputFillIn","useBrowserGeolocation","inputSelector","googleScriptParams","key","googlePlacesConfig","mapResult","streetName","use","resultType","targetSelector","streetNumber","city","country","postalCode","lat","lng","instances","AddressAutofill","context","options","HTMLElement","HTMLDocument","console","error","inputElement","querySelector","HTMLInputElement","autocomplete","result","instance","push","getAttribute","window","hasGoogleAutocomplete","initAutocomplete","forEach","injectMapsScript","addEventListener","event","keyCode","preventDefault","stopPropagation","resultMap","place","getPlace","itemName","itemValue","geometry","location","address_component","address_components","filter","component","types","includes","length","element","warn","value","params","mapsUrl","mapsScript","document","createElement","src","body","appendChild","google","maps","places","Autocomplete","geolocate","addListener","setAddress","reference","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","init"],"mappings":"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","file":"addressAutofill.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * The Modules default configuration.\n */\nconst defaultOptions = {\n  autoConstruct: false, // if set to true the module will autoconstruct and attach to window object as \"addressAutofill\"\n  enableInputFillIn: true, // Fills out form with configured selectors on selection of google address\n  useBrowserGeolocation: true, // Uses the browser's geolocation API to ask the user for her current location (makes predictions more precise)\n  inputSelector: '[data-autocomplete]',\n  googleScriptParams: { // This configuration will be passed to Google Places API as urlParams\n    key: 'YOUR_KEY_IS_REQUIRED_HERE' // This is required!\n  },\n  googlePlacesConfig: {}, // This configuration will be passed to Google Places API\n  mapResult: {\n    streetName: {\n      use: 'long_name',\n      resultType: 'route',\n      targetSelector: '[name=\"streetName\"]'\n    },\n    streetNumber: { \n      use: 'short_name',                    // Use from Api result 'short_name' | 'long_name'\n      resultType: 'street_number',          // Name of the type from Api result\n      targetSelector: '[name=\"streetNumber\"]'  // Target element that should be filled with this information\n    },\n    city: {\n      use: 'long_name',\n      resultType: 'locality',\n      targetSelector: '[name=\"city\"]'\n    },\n    country: {\n      use: 'long_name',\n      resultType: 'country',\n      targetSelector: '[name=\"country\"]'\n    },\n    postalCode: {\n      use: 'short_name',\n      resultType: 'postal_code',\n      targetSelector: '[name=\"postalCode\"]'\n    },\n    lat: {\n      use: 'geo',\n      resultType: 'lat',\n      targetSelector: '[name=\"lat\"]'\n    },\n    lng: {\n      use: 'geo',\n      resultType: 'lng',\n      targetSelector: '[name=\"lng\"]'\n    }\n  }\n}\n\n\n/**\n * Stores all instances of AddressAutofill\n */\nlet instances = []\n\n\nexport default class AddressAutofill {\n  constructor (context, options = {}) {\n    if (typeof context !== 'object' || (!(context instanceof HTMLElement) && !(context instanceof HTMLDocument))) {\n      console.error('Please choose a valid context for AddressAutofill! Given:', context)\n      return null\n    }\n    this.context = context\n    this.inputElement = this.context.querySelector('[data-autocomplete]')\n    if (!(this.inputElement instanceof HTMLInputElement)) {\n      console.error('Please choose a valid input field for AddressAutofill! Given:', this.inputElement)\n      return null\n    }\n    this.options = {...defaultOptions, ...options}\n    this.autocomplete = null\n    this.result = null\n    this.instance = instances.push(this) - 1\n\n    // Check for configs\n    if (this.inputElement.getAttribute('data-autocomplete') !== null) {\n      this.options.googleScriptParams.key = this.inputElement.getAttribute('data-autocomplete')\n    }\n\n    // Check if the script is already injected\n    if (!window.hasGoogleAutocomplete) {\n      if (typeof window.initAutocomplete !== 'function') {\n        // Creates new instance of autocomplete for each already existing AddressAutofill instance\n        window.initAutocomplete = () => instances.forEach(instance => initAutocomplete(instance))\n      }\n      injectMapsScript(this.options.googleScriptParams)\n    } else {\n      initAutocomplete(this)\n    }\n\n    // Capture Enter Press\n    this.inputElement.addEventListener('keydown', event => {\n      if (event.keyCode == 13) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n    })\n\n    return this\n  }\n\n\n  /**\n   * Sets the address found by the Places API to the configured fields.\n   */\n  setAddress() {\n    this.result = {}\n    const resultMap = this.options.mapResult\n    const place = this.autocomplete.getPlace()\n    // Map the result data\n    for (const itemName in resultMap) {\n      const itemValue = null\n      switch(resultMap[itemName].resultType) {\n        case 'lat':\n          itemValue = place.geometry.location.lat()\n          break\n        case 'lng':\n          itemValue = place.geometry.location.lng()\n          break\n        default:\n          const address_component = place.address_components.filter(component => component.types.includes(resultMap[itemName].resultType))\n          if (address_component.length > 0) {\n            itemValue = address_component[0][resultMap[itemName].use]\n          }\n      }\n      // Optional: Fill out the form\n      if (this.options.enableInputFillIn) {\n        const element = this.context.querySelector(resultMap[itemName].targetSelector)\n        if (!element) {\n          console.warn(`AddressAutofill: Could not find in element ${resultMap[itemName].targetSelector} in DOM, please check your config!`)\n        } else {\n          this.result[itemName] = itemValue\n          element.value = itemValue\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * Injects Google Maps Api script to dom using params from config.\n * @param {object} params \n */\nfunction injectMapsScript (params = null) {\n  if (typeof params !== 'object') {\n    return console.error('\"googleScriptParams\" are required for AddressAutofill configuration!')\n  }\n  if (!params.key) {\n    return console.error('Please add a valid API key for \"AddressAutofill\" to run AddressAutofill!')\n  }\n  let mapsUrl = \"https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete\"\n  let mapsScript = document.createElement(\"script\")\n  for (const key in params) {\n    mapsUrl += `&${key}=${params[key]}`\n  }\n  mapsScript.src = mapsUrl\n  document.body.appendChild(mapsScript)\n  window.hasGoogleAutocomplete = true\n}\n\n\n/**\n * Instanciates a new google autocomplete object and binds it to the given AddressAutofill instance.\n * @param {AddressAutofill} instance - Any instance of the AddressAutofill module.\n */\nfunction initAutocomplete (instance) {\n  // Create the autocomplete instance with custom options\n  instance.autocomplete = new google.maps.places.Autocomplete(instance.inputElement, instance.options.googlePlacesConfig)\n  if (instance.options.useBrowserGeolocation) {\n    geolocate(instance.autocomplete)\n  }\n  // When the user selects an address from the dropdown, populate the address fields in the form.\n  instance.autocomplete.addListener('place_changed', () => instance.setAddress())\n}\n\n\n/**\n * Tries to get the user's geolocation using the browser's Geolocation API.\n */\nfunction geolocate(reference) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const location = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }\n      const circle = new google.maps.Circle({\n        center: location,\n        radius: position.coords.accuracy\n      })\n      reference.setBounds(circle.getBounds())\n    })\n  }\n}","import AddressAutofill from './addressAutofill'\n\nexport const init = (context, options = {}) => new AddressAutofill(context, options)"],"sourceRoot":""}